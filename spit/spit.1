'\" t
.\"     Title: spit
.\"    Author: Stuart Inglis, Ph.D.
.\" Generator: Asciidoctor 2.0.16
.\"      Date: 2023-06-13
.\"    Manual: spit manual
.\"    Source: spit 1.2
.\"  Language: English
.\"
.TH "SPIT" "1" "2023-06-13" "spit 1.2" "spit manual"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
spit \- Stu\*(Aqs powerful I/O tester
.SH "SYNOPSIS"
.sp
spit [ \fIOPTIONS\fP ] ... \fIDEVICE(S)\fP ... \fICOMMANDS\fP...
.SH "DESCRIPTION"
.sp
Spit is a comprehensive tool designed for testing block devices and
file systems. It offers a robust suite of testing capabilities including
latency tests, speed tests, and multi\-threaded conflict resolution tests.
.sp
It\(cqs particularly useful for validating system performance and reliability,
with features specifically designed to test Non\-Uniform Memory Access (NUMA)
actions, caches, read\-ahead and action ordering. This functionality helps in identifying and resolving
issues that might arise in custom block devices and file systems.
.sp
Spit also supports decoupling of writes from verification, allowing
system reboots in between, which is crucial for system resilience
testing.
.sp
This makes spit an indispensable tool for system administrators, developers,
and performance engineers looking to evaluate and improve system performance
and stability.
.SH "FEATURES"
.sp
spit(1) performs various I/O tests. The range of tests includes:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
reading, writing, forwards, backwards, in stripes, back/forth, subsampling
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
time based tests, LBA coverage tests, limited number of position tests
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
sequential, random, mostly sequential
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
multiple measurements per position, output of median/max values
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
variable IOs in flight and steps
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
static and variable block sizes
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
multiple threads (with an AIO context per thread)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
multiple commands
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
analysis of the underlying block devices for amplification measure
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
verification of writes
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
statistical output, min/max/mean/median/9s/and more
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
test patterns for readahead busting
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
\fBspit \-h\fP to get a lot of example commands
.RE
.SH "SIMPLE EXAMPLE"
.sp
spit [OPTIONS] \-f \fIdevice\fP \-c \fIcommands\fP
.sp
e.g.
\fBspit \-f /dev/sda \-c rzs1k1024\fP
.sp
To see the IO operations and positions use the dump/\fB\-d\fP option to see the first 20 positions.
.sp
e.g. \fBspit \-f /dev/sda \-c rzs1k1024 \-d 20\fP
.SH "PROCESS FLOW"
.sp
The process flow is as follows:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 1." 4.2
.\}
Generate an array of positions. The position structure includes
location, size and records the various timing information.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 2." 4.2
.\}
A set of precondition actions are optionally performed.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 3." 4.2
.\}
An outer loop is created. The outer loop is to enable periodic adjustment of the positions (resampling etc).
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 4." 4.2
.\}
An inner loop is created. The inner loop quickly iterates over the
position array. It has a variety of early exit conditions including:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
bytes\-processed limit
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
positions\-processed limit
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
time\-limit
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 5." 4.2
.\}
The positions and their timing/location information can be optionally dumped to a file.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 6." 4.2
.\}
Performance/latency statistics are generated.
.RE
.SH "DEVICE(S)"
.sp
\fB\-f device\fP
.RS 4
Specific a single block device (e.g. \-f /dev/ram0). Multiple threads can divide up the LBA range using the \fBj\fP option. (e.g. \-f /dev/ram0 \-c rzs1j8). If the goal is for each thread to access the same range, using uppercase \fBJ\fP option. (e.g. \-f /dev/ram0 \-c rzs1j8 would create 8 threads accessing the same range).)
.RE
.sp
\fB\-F prefix\fP
.RS 4
The filesystem filename prefix for filesystem tests (e.g. to create 32 files, each 1GiB in size use \fB\-F testprefix \-G1 \-J 32\fP). \fB\-F\fP is an alternative to \fB\-f\fP and conflicts with it. Choose \fB\-f\fP or \fB\-F prefix\fP. Note that uppercase J is used with the \-F option. This is because lowercase j means divide the LBA range by the number of threads, which would only write 1/32th of the data into each file. The file sizes may look correct due to an initial fallocate(1), but the total IO performed would be incorrect.
.RE
.sp
\fB\-I filename\fP
.RS 4
Specific a file that contains a list of device names (e.g. \-I devices.txt). The \fBdevices.txt\fP file contains one device per line. To process 200 block devices at once, create devices.txt with 200 lines.
e.g. \fBspit \-I devices \-c rs1k1024\fP will start 200 threads, one per device, and run the same command on them. Note in this case the starting position is not specified so each drive will start at a random location. Adding \fBz\fP will start each job from position zero.
.RE
.sp
\fB\-O filename\fP
.RS 4
Specifies a list of raw devices, matched with the \fB\-f\fP option shows
device read/write amplification. e.g. \fBspit \-f /dev/md0 \-O underlyingdevices.txt\fP
.RE
.SH "OPTIONS"
.sp
\fB\-h\fP
.RS 4
Displays a myriad of testing commands
.RE
.sp
\fB\-d n\fP
.RS 4
Dump the first \fBn\fP positions to understand the IO profile.
.RE
.sp
\fB\-G size\fP
.RS 4
Limit the positions to a maximum of \fBsize\fP GB (e.g. \-G 32). Without a suffix the units are in GB. Optional suffixes include: GiB, TiB, TB, PiB, PB.
.RE
.sp
\fB\-B filename\fP
.RS 4
The benchmarking file that records the regular console output to the benchmark file. The format is described in the second below. To get more fine grained results decrease the \fB\-s time\fP option.
.RE
.sp
\fB\-P filename\fP
.RS 4
All positions with their size and timing and read/write actions are output. This file can be used by \fBspitchecker\fP to verify the positions between run. Overlapping write actions that overlap in position are filtered to keep the most recent action.  The positions file can be later verified using the \fBspitchecker(1)\fP program. If \fB\-P \-\fP is used instead of a filename, the positions will be stream to stdout (without overlap filtering) so verification may not be possible if writes overlap.
.RE
.sp
\fB\-s time\fP
.RS 4
Specify the time between regular output. The default is \fB\-s 1\fP, which is one output line per second. \fB\-s 0.01\fP will output every 1/100th of a second. \fB\-s 0\fP will start off fast and slow time over time.
.RE
.sp
\fB\-t s\fP
.RS 4
Limit the execution to \fBs\fP seconds (e.g. \-t 30)
.RE
.sp
\fB\-T s\fP
.RS 4
Hard exit(\-1) execution if spit is still running after \fBs\fP seconds.
.RE
.sp
\fB\-L GiB\fP
.RS 4
Specify the amount of RAM to use for the position information. \f(CRspit\fP stores information about each position, so RAM scales up with the number of positions. Less RAM can be used by having larger block sizes. More positions can be obtained by using more RAM and/or larger block sizes.
.RE
.sp
\fB\-M options\fP
.RS 4
Output MySQL options per test. (e.g. \-M iotype=write,opsize=64,iopattern=rand,qd=128,devicestate=burst,\(rs
degraded=0,k=10,m=2,encryption=none,checksum=crc32c,cache=1,precondition=GI20000)
.RE
.sp
\fB\-N options\fP
.RS 4
Output MySQL options per machine/type. (e.g. \-N os=centos,version=1.2.59,machine=wow,blockdevice=lsiraid)
.RE
.sp
\fB\-P filename\fP
.RS 4
Save position information to \fBfilename\fP. The positions file contains the device, offset, size, random seed, start time, end time, latency, and more.
.RE
.sp
\fB\-R seed\fP
.RS 4
Specify the starting random \fBseed\fP
.RE
.sp
\fB\-v\fP
.RS 4
Verify writes by reading and checking. The positions can also be written using the global \fBP filename\fP command, then verified with \fBspitchecker\fP
.RE
.SH "COMMANDS"
.sp
A command is a single contiguous string. Spaces are ignored if the
entire string is quoted. An example of a command string may look like:
.sp
\fBspit \-f /dev/device \-c rk64P1000s3\fP
.sp
Note: For readability it is possible to pass in the command options surround by double quotes.
.sp
\fBspit \-f /dev/device \-c "r z s1 k1024 q1"\fP
.sp
The command options are described below:
.sp
\fBr\fP
.RS 4
Performs reads
.RE
.sp
\fBw\fP
.RS 4
Performs writes
.RE
.sp
\fBc\fP
.RS 4
Copy regions, perform a read and then a write of the data 1/2 LBA away.
.RE
.sp
\fBm\fP
.RS 4
Double the number of test positions, and add a read operation to the position of any previous write operation. Since the number of positions is usually much more than the QD there is no in\-flight issue. \fBm\fP can be combined with reading/writing or anymix. (e.g. ws0m)
.RE
.sp
\fBAn\fP
.RS 4
After <n> MiB of IO, randomly change position inside the LBA range. e.g. to specify sequential reads and every 4 MiB jump to a new location use \fBspit \-c rs1k64A4\fP
.RE
.sp
\fBpN\fP
.RS 4
Set the read/write ratio to \fBN\fP. (e.g. p0 is write only, p1 is read only, p0.75 is 75% reads)
.RE
.sp
\fBGlow\-high\fP
.RS 4
Limit the position range to \fBlow\fP to \fBhigh\fP GB. (e.g. G2\-3).
.RE
.sp
\fBH\fP
.RS 4
Alternate the IOs per NUMA. e.g. run the first command first thread from NUMA0, then first command second thread from NUMA1. Use the \fB\-d 10\fP option to dump out the commands per thread to understand it quickly.
.RE
.sp
\fBj N\fP
.RS 4
Create \fBN\fP threads with the same command. Using lowercase \fBj\fP the LBA range will first be divided by \fBN\fP to avoid overlapping thread ranges. Each thread will be seeded with a unique random value so the random positions will not be the same.
.RE
.sp
\fBJ N\fP
.RS 4
Similar to lowercase \fBj\fP, but with uppercase \fBJ\fP the range will be the same for all threads. Allows cache test and other conflict resolution. Uppercase J is particularly important with the per file (\fB\-F prefix\fP) mode, so that each file isn\(cqt written a divided range.
.RE
.sp
\fBkN\fP or \fBklowBS\-highBS\fP
.RS 4
Block size or \fIlowblocksize\fP to \fIhighblocksize\fP range. (e.g. k4\-128). The hypen as a range will pick a value between the low and high range, in multiples of a 4KiB block size. The range with a colon (e.g. k4\-128) will only pick values that are also powers of 2.
.RE
.sp
\fBn\fP
.RS 4
Use random positions with replacement
.RE
.sp
\fBN\fP
.RS 4
Add the maximum block size to all positions
.RE
.sp
\fBqN\fP
.RS 4
Queue depth
.RE
.sp
\fBsN\fP
.RS 4
number of contiguous sequence regions. \fBs0\fP means random, \fBs1\fP means
a single linear stream, \fBs32\fP means 32 contigous stream.
.RE
.sp
\fBs0.x\fP
.RS 4
Between s0 (random) and s1 (linear stream) there is a range of s0.0 up to s1. The s0.1 will be lineared by with a probability of 0.1 the location will be randomised.
.RE
.sp
\fBsN\-maxSizeInKiB\fP
.RS 4
Specify the number of continuous sequence regions, include the maximum
continuous length in KiB. e.g. s32\-1024 makes 32 contiguous regions with a
maximum size of 1024 KiB (1 MiB).
.RE
.sp
\fBSn\fP
.RS 4
Speed contrained IO. e.g. S100 with do 100 IOs per second.
.RE
.sp
\fBu\fP
.RS 4
Generate pairs of writes followed by reads with unique seeds. Combined with
multiple threads and G_ (LBA thread separation) and QD=1, this enables POSIX w/r testing.
.RE
.sp
\fBz\fP
.RS 4
Start sequential positions from block 0
.RE
.sp
\fBZn\fP
.RS 4
Start sequential positions from block \fBn\fP
.RE
.sp
\fBD\fP
.RS 4
Turn off O_DIRECT device access mode. e.g. required for ZFS and similar file systems.
.RE
.SS "Scale/position commands"
.sp
\fBPn\fP
.RS 4
Limit the number of positions to \fBn\fP
.RE
.SS "Timing commands"
.sp
\fBBn\fP
.RS 4
Before the command starts, wait \fBn\fP seconds
.RE
.sp
\fBWn\fP
.RS 4
Wait for \fBn\fP seconds between iterations
.RE
.sp
\fBTn\fP
.RS 4
Limits the thread/command to \fBn\fP seconds
.RE
.sp
\fBxn\fP
.RS 4
Lower case \fBx\fP. Cover each of the LBA positions \fBn\fP times. e.g. \-c rs1x1 will cover the LBA range and will ignore the time duration commands. If combined with P1000x1, this will repeat the 1,000 IO operations until a total amount of IO equals the size of the LBA (e.g. millions of times to get to TB).
.RE
.sp
\fBXn\fP
.RS 4
Upper case \fBX\fP. Instead of time based, iterate until the positions have been processed
\fBn\fP times. e.g. if combined with P1000X1 this will process 1,000 IOs only.
.RE
.SH "PATTERNS"
.sp
\fBrzs1P100\fP: read the first 100 positions starting from zero, 4 KiB blocks.
.sp
\fBrzs1P100k1024\fP: read the first 100 positions starting from zero, 1024 KiB/1 MiB blocks.
.sp
\fBrs1P100\fP: read 100 contiguous positions, offset by a random amount
.sp
\fBrzs1P100j8G_\fP: read 100 contiguous positions, offset by a random amount per thread, first carving up the LBA range.
.sp
\fBrzs1P+100\fP: read operations, 100 positions equally spaced across the LBA range, time based.
.sp
\fBrzs1P+1000X1\fP: read operations, 100 positions equally spaced across the LBA range, do 1,000 operations then stop. Uppercase \fBX\fP.
.sp
\fBrzs1P+1000x1\fP: read operations, 100 positions equally spaced across the LBA range, repeat until IO equals the size of the LBA. Lowercase \fBx\fP.
.sp
\fBrzs1P\-100\fP: read operations, 100 positions randomly picked with replacement.
.sp
\fBrzs1P.100\fP: read operations, alternative start, end, start+1...
.sp
\fBck64\fP: copy the region using 64 KiB blocks
.sp
\fBs1z\fP: sequential, one contiguous region starting from zero
.sp
\fBs1\fP: sequential, one contiguous region starting from a random offset
.sp
\fBs0\fP: not sequential. e.g. random
.sp
\fBs2\fP: two sequential regions, dividing the region into two.
.sp
\fBs9\fP: two sequential regions, dividing the region into nine
.sp
\fBs\-1z\fP: reverse sequential starting from zero.
.sp
\fBs1\fP: monotonically increasing...
.sp
\fBs0\fP: random...
.sp
\fBs0.05\fP: almost entirely random, with a few monotonically increasing positions
.sp
\fBs0.95\fP: almost entirely monotonic
.sp
\fBs0.95\-20\fP with a 0.05 prob of swapping a position with another within 20 places.
.sp
\fBrs1k4q1\fP sequential 4KiB reads, 1 IO in flight
.sp
\fBrs1k4\-128q1\fP sequential reads, using block size 4 to 128 KiB, 1 IO in flight
.sp
\fBrs1k64A4q1\fP sequential reads, 64 KiB size, resetting position every 4 MiB.
.SH "BENCHMARKING"
.SS "Sequential reads / writes"
.sp
In the following commands, replace \fBr\fP with \fBw\fP for writes.
.sp
\fBspit \-f /dev/device \-c rk64\fP
.sp
.if n .RS 4
.nf
.fam C
Performs a single thread/job that performs reads, with 64 KiB reads
.fam
.fi
.if n .RE
.sp
\fBspit \-f /dev/device \-c rk64 \-j 32\fP
.sp
.if n .RS 4
.nf
.fam C
Create 32 threads, with a single contigous read inside each thread
.fam
.fi
.if n .RE
.sp
\fBspit \-f /dev/device \-c r32k64\fP
.sp
.if n .RS 4
.nf
.fam C
Create a single threads, break the device into 32 contiguous regions
.fam
.fi
.if n .RE
.SS "Random read / writes"
.sp
\fBspit \-f /dev/device \-c rs0\fP
.sp
.if n .RS 4
.nf
.fam C
Performs a single thread/job, random 4KiB reads
.fam
.fi
.if n .RE
.sp
\fBspit \-f /dev/device \-c rs0 \-j 32\fP
.sp
.if n .RS 4
.nf
.fam C
Creates 32 threads, reads random 4KiB reads
.fam
.fi
.if n .RE
.sp
\fBspit \-f /dev/device \-c rs0 \-j 32 \-G1\fP
.sp
.if n .RS 4
.nf
.fam C
Creates 32 threads, reads randomly 4KiB reads, limited to first 1 GB.
For devices with cache these operations should be cached.
.fam
.fi
.if n .RE
.sp
\fBspit \-f /dev/device \-c rP10000\fP
.sp
.if n .RS 4
.nf
.fam C
Read from the first 10,000 positions (4 KiB) blocks in a device.
.fam
.fi
.if n .RE
.SS "Mixing reads/writes"
.sp
\fBspit \-f /dev/device \-c mP10000 \-c rk64\fP
.sp
.if n .RS 4
.nf
.fam C
Two threads, one reading/write metadata to 10,000 positions. Another
thread performing sequential reads.
.fam
.fi
.if n .RE
.sp
\fBspit \-f /dev/device \-c w \-c r\fP
.sp
.if n .RS 4
.nf
.fam C
Two threads, both sequential, one reading, one writing.
.fam
.fi
.if n .RE
.sp
\fBspit \-f /dev/device \-c ws0 \-c rs0\fP
.sp
.if n .RS 4
.nf
.fam C
Two threads, both random, one reading, one writing.
.fam
.fi
.if n .RE
.sp
\fBspit \-f /dev/device \-c ws1G0\-100 \-c "w s0 G100\-200"\fP
.sp
.if n .RS 4
.nf
.fam C
On a 200 GB device perform linear writes in the first half and
random writes on the second half.
.fam
.fi
.if n .RE
.SH "FILE FORMATS"
.SS "Position format (\-P output)"
.sp
The position file is tab separated. Make sure you process with tabs, as two of the columns include " GB" as a suffix.
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 1." 4.2
.\}
Device name
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 2." 4.2
.\}
Position on disk (in bytes)
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 3." 4.2
.\}
Position on disk (in GB)
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 4." 4.2
.\}
Position (as a percentage of the device)
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 5." 4.2
.\}
Action: \*(AqR\*(Aq, \*(AqW\*(Aq
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 6." 4.2
.\}
Block length (in bytes)
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 7." 4.2
.\}
Maximum block device size
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 8." 4.2
.\}
Maximum block device size (in GB)
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 9." 4.2
.\}
Seed (used to calculate the random block)
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 10.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 10." 4.2
.\}
Submit time
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 11.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 11." 4.2
.\}
Finish time
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 12.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 12." 4.2
.\}
Mean IO time
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 13.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 13." 4.2
.\}
Position index
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 14.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 14." 4.2
.\}
Number of samples that were performed
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 15.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 15." 4.2
.\}
Median IO time
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 16.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 16." 4.2
.\}
Max IO time
.RE
.SS "Benchmark format (\-B output)"
.sp
The benchmark format is tab separated.
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 1." 4.2
.\}
Elapsed time (seconds)
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 2." 4.2
.\}
Unix time (seconds)
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 3." 4.2
.\}
read bytes (MB)
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 4." 4.2
.\}
read IOPS
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 5." 4.2
.\}
write bytes (MB)
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 6." 4.2
.\}
write IOPS
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 7." 4.2
.\}
read bytes/s (MB/s)
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 8." 4.2
.\}
write bytes/s (MB/s)
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.  sp -1
.  IP " 9." 4.2
.\}
device util
.RE
.SH "COMBINATIONS"
.sp
Using 1 GiB and 1 MiB blocks (e.g. \fBspit \-f device \-G 1GiB \-c rM1...\fP) the following options have the following behaviour:
.TS
allbox tab(:);
lt lt lt lt lt.
T{
.sp
Command
T}:T{
.sp
Round Details
T}:T{
.sp
Data written
T}:T{
.sp
Round action
T}:T{
.sp
Explanation
T}
T{
.sp
rM1x1
T}:T{
.sp
1 GiB / 1024
T}:T{
.sp
1 GiB
T}:T{
.sp
none
T}:T{
.sp
write positions in a loop until 1 GiB of IO
T}
T{
.sp
rk256x1
T}:T{
.sp
1 GiB / 4096
T}:T{
.sp
1 GiB
T}:T{
.sp
none
T}:T{
.sp
write positions in a loop until 1 GiB of IO
T}
T{
.sp
rM1x2
T}:T{
.sp
1 GiB / 1024
T}:T{
.sp
2 GiB
T}:T{
.sp
none
T}:T{
.sp
write positions in a loop until 2 GiB of IO
T}
T{
.sp
rM1X1
T}:T{
.sp
1024 / 1 GiB
T}:T{
.sp
1 GiB
T}:T{
.sp
none
T}:T{
.sp
write each position once
T}
T{
.sp
rM1X2
T}:T{
.sp
1024 / 1 GiB
T}:T{
.sp
2 GiB
T}:T{
.sp
none
T}:T{
.sp
write each position twice
T}
T{
.sp
rM1x1n
T}:T{
.sp
1 1GiB / 1024
T}:T{
.sp
1 GiB
T}:T{
.sp
rerandomize
T}:T{
.sp
write positions in a loop until 1 GiB of IO
T}
T{
.sp
rM1x2n
T}:T{
.sp
1 1GiB / 1024
T}:T{
.sp
1 GiB
T}:T{
.sp
rerandomize
T}:T{
.sp
write positions in a loop until 1 GiB, then resuffle, repeat until 2 GiB
T}
T{
.sp
rM1
T}:T{
.sp
time / time
T}:T{
.sp
time
T}:T{
.sp
none
T}:T{
.sp
time based
T}
.TE
.sp
.sp
Note the \fBn\fP option performs a re\-sampling (it\(cqs not just a
shuffle). The \fBN\fP option adds a blockSize value to each position after
each round.
.SH "EXIT STATUS"
.sp
\fB0\fP
.RS 4
Success.
.RE
.sp
\fBnon\-zero\fP
.RS 4
Failure (syntax of usage error).
.RE
.SH "BUGS"
.sp
Bugs will be rewarded by choc fish... in person :)
.SH "SEE ALSO"
.sp
\fBspitchecker\fP(1)
.SH "AFFILIATIONS"
.sp
Department of Computer Science, University of Waikato, New Zealand.
.sp
Visit us, it\(cqs a lovely campus and a great place to live.
.SH "AUTHOR"
.sp
Stuart Inglis, Ph.D.